.wrapper {
    display: flex;
    align-items: center;
    flex-direction: row;
}

.box {
    cursor: pointer;
    margin: 25px 0px 0px 25px;
    height: 100px;
    width: 100px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: rgb(49, 46, 129, 1);
}

/*Transition 1. Grow. We only want it to grow once, and only on hover, so use a transition. User can see element is interactive with cursor. Simple transformation of scale. Without duration it's a bit abrupt, so we can slow it down instead.'*/

/* Lecture Cheat - Box style and colours pre-set below.*/

.boxGrow {
    cursor: pointer;
    margin: 25px 0px 0px 25px;
    height: 100px;
    width: 100px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: rgb(49, 46, 129, 1);
}

/*Transform can scale, rotate, translate and skew. "It modifies the coordinate space of the 'CSS Visual Formatting Model'"*/

.boxGrow:hover {
    transform: scale(1.1);
    transition: 0.4s;
}

/* 
  Transition 2: Transitions control the speed between two states, such as on a hover. You can explicitly state which properties are to change and set the delay, duration and a timing function, such as 'ease-in', 'ease-out' or 'linear' which sets the style/type of the change*/

.boxFade {
    opacity: 1;
    transition: 0.6s ease-out;
    cursor: pointer;
    margin: 25px 0px 0px 25px;
    height: 100px;
    width: 100px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: rgb(49, 46, 129, 1);
}

/* ease in starts slow and ends fast. ease out is fast to start and slows at the end. Ease (shorthand for ease-in-out) starts and ends fast but slows in the middle. Linear is standard.*/

.boxFade:hover {
    opacity: 0.2;
}

/* //////
  Transition 3. Resize. On hover, change dimensions and add a shadow. Without timed transition this looks harsh. Put a transition on the initial box so it goes back slowly too*/

.boxSpaceOut {
    transition: 0.6s;
    cursor: pointer;
    margin: 25px 0px 0px 25px;
    height: 100px;
    width: 100px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: rgb(49, 46, 129, 1);
}

.boxSpaceOut:hover {
    letter-spacing: 15px;
    font-size: 1.2em;
    transition: 0.8s;
}

.boxResize {
    transition: 0.5s ease;
    cursor: pointer;
    margin: 25px 0px 0px 25px;
    height: 100px;
    width: 100px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: rgb(49, 46, 129, 1);
}

.boxResize:hover {
    width: 350px;
    height: 70px;
    box-shadow: 0 15px 15px -10px rgba(0, 0, 0, 0.5);
}

/* //////////////////////////
  
  Animations can be set using the keyframes property, which denotes what each frame does during each stage of the transition. In this example, we first design the keyframes animation and name it 'pulse', stating that at 25% of the duration we want one size, at 75% of it we want another. On the object itself, we use the name, how long we want each animation to run, and how many animations we should run - or infinite. It does not need to be triggered.*/

.boxPulse {
    animation: pulse 2s infinite;
    cursor: pointer;
    margin: 25px 0px 0px 25px;
    height: 100px;
    width: 100px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: rgb(49, 46, 129, 1);
}

@keyframes pulse {
    25% {
        transform: scale(1.1);
    }
    75% {
        transform: scale(0.9);
    }
}

/* //////
  We don't always want animations running the whole time. It's usual to have them react to hover or click effects (requires Javascript). To set a hover effect, simply use :hover. */

.boxRotate {
    cursor: pointer;
    margin: 25px 0px 0px 25px;
    height: 100px;
    width: 100px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: rgb(49, 46, 129, 1);
}

.boxRotate:hover {
    animation: infinite-spinning 2s infinite;
}

@keyframes infinite-spinning {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}

/* //Animated slide out feature. Can be adapted for selections or slide-out menus*/
.slideOut {
    animation-duration: 1.5s;
    cursor: pointer;
    margin: 25px 0px 0px 25px;
    height: 100px;
    width: 100px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: rgb(49, 46, 129, 1);
}

.slideOut:hover {
    animation-name: slideOut;
}

@keyframes slideOut {
    from {
        margin-left: 0%;
    }

    to {
        margin-left: 70%;
        opacity: 0;
    }
}

/* //////// 
  In this example, we can play the animation (which goes from pale lilac to dark purple) in a loop with a reverse to make sure it never ends and defaults back to blue. 'animation' can be used as a shorthand for multiple properties.
  */

.boxColChange {
    animation-name: colorChange;
    cursor: pointer;
    margin: 25px 0px 0px 25px;
    height: 100px;
    width: 100px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: rgb(49, 46, 129, 1);
    animation: colorChange 5s ease infinite alternate;
}

@keyframes colorChange {
    0% {
        background-color: rgb(49, 46, 129, 1);
    }
    50.0% {
        background-color: #efd1ff;
    }
    100.0% {
        background-color: #493d4f;
    }
}

/* ////// 
  Loading spinner, big fat border even if rounded still responds to border-top property. Just move it around.*/
.loader {
    margin: 25px 0px 0px 25px;
    border: 16px solid rgb(49, 46, 129, 1);
    border-top: 16px solid #ddd0ff;
    border-radius: 50%;
    width: 120px;
    height: 120px;
    animation: spin 2s ease infinite;
}

/* This can illustrate the difference in speeds*/
/* Linear is just as is*/
/* Ease-in */
/* Ease-out */
/* Ease */

@keyframes spin {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(360deg);
    }
}
